# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `json` gem.
# Please instead update this file by running `bin/tapioca gem json`.


module JSON
  private

  def dump(obj, anIO = T.unsafe(nil), limit = T.unsafe(nil), kwargs = T.unsafe(nil)); end
  def fast_generate(obj, opts = T.unsafe(nil)); end
  def fast_unparse(*_arg0, **_arg1, &_arg2); end
  def generate(obj, opts = T.unsafe(nil)); end
  def load(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end
  def load_file(filespec, opts = T.unsafe(nil)); end
  def load_file!(filespec, opts = T.unsafe(nil)); end
  def parse(source, opts = T.unsafe(nil)); end
  def parse!(source, opts = T.unsafe(nil)); end
  def pretty_generate(obj, opts = T.unsafe(nil)); end
  def pretty_unparse(*_arg0, **_arg1, &_arg2); end
  def restore(*_arg0, **_arg1, &_arg2); end
  def unparse(*_arg0, **_arg1, &_arg2); end
  def unsafe_load(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    def [](object, opts = T.unsafe(nil)); end
    def create_id; end
    def create_id=(new_value); end
    def deep_const_get(path); end
    def dump(obj, anIO = T.unsafe(nil), limit = T.unsafe(nil), kwargs = T.unsafe(nil)); end
    def fast_generate(obj, opts = T.unsafe(nil)); end
    def fast_unparse(*_arg0, **_arg1, &_arg2); end
    def generate(obj, opts = T.unsafe(nil)); end
    def generator; end
    def generator=(generator); end
    def load(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end
    def load_file(filespec, opts = T.unsafe(nil)); end
    def load_file!(filespec, opts = T.unsafe(nil)); end
    def parse(source, opts = T.unsafe(nil)); end
    def parse!(source, opts = T.unsafe(nil)); end
    def parser; end
    def parser=(parser); end
    def pretty_generate(obj, opts = T.unsafe(nil)); end
    def pretty_unparse(*_arg0, **_arg1, &_arg2); end
    def restore(*_arg0, **_arg1, &_arg2); end
    def state; end
    def state=(_arg0); end
    def unparse(*_arg0, **_arg1, &_arg2); end
    def unsafe_load(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end

    private

    def const_missing(const_name); end
    def deprecated_singleton_attr_accessor(*attrs); end
  end
end

class JSON::Coder
  def initialize(options = T.unsafe(nil), &as_json); end

  def dump(object, io = T.unsafe(nil)); end
  def generate(object, io = T.unsafe(nil)); end
  def load(source); end
  def load_file(path); end
  def parse(source); end
end

class JSON::Ext::Generator::State
  def initialize(opts = T.unsafe(nil)); end

  def [](name); end
  def []=(name, value); end
  def configure(opts); end
  def merge(opts); end
  def to_h; end
  def to_hash; end
end

class JSON::Ext::Parser
  def initialize(source, opts = T.unsafe(nil)); end

  def parse; end
  def source; end
end

JSON::Ext::Parser::Config = JSON::Ext::ParserConfig

class JSON::Fragment < ::Struct
  def initialize(json); end

  def json; end
  def json=(_); end
  def to_json(state = T.unsafe(nil), *_arg1); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class JSON::GeneratorError < ::JSON::JSONError
  def initialize(message, invalid_object = T.unsafe(nil)); end

  def detailed_message(*_arg0, **_arg1, &_arg2); end
  def invalid_object; end
end

class JSON::GenericObject < ::OpenStruct
  def as_json(*_arg0); end
  def to_hash; end
  def to_json(*a); end
  def |(other); end

  class << self
    def dump(obj, *args); end
    def from_hash(object); end
    def json_creatable=(_arg0); end
    def json_creatable?; end
    def json_create(data); end
    def load(source, proc = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

JSON::PARSE_L_OPTIONS = T.let(T.unsafe(nil), Hash)
JSON::PRETTY_GENERATE_OPTIONS = T.let(T.unsafe(nil), Hash)
JSON::Parser = JSON::Ext::Parser

module JSON::ParserOptions
  class << self
    def prepare(opts); end

    private

    def array_class_proc(array_class, on_load); end
    def create_additions_proc(opts); end
    def create_additions_warning; end
    def object_class_proc(object_class, on_load); end
  end
end

JSON::State = JSON::Ext::Generator::State

module Kernel
  private

  def JSON(object, opts = T.unsafe(nil)); end
  def j(*objs); end
  def jj(*objs); end
end
